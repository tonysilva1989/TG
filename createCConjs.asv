

% %HOG
% for k=0:9
%     C8 = [];
%     load(['featuresHOGC7/X_' num2str(k)]); %retira o X do fold atual apenas com o WLD e joga em C8
%     C8 = X;
%     save(['featuresWLDLBPC7/X_' num2str(k) '.mat'], 'C8'); %guarda a combina��o de features do fold atual em X_n
% end

% %LBP
% for k=0:9
%     C8 = [];
%     load(['featuresLBPC7/X_' num2str(k)]); %retira o X do fold atual apenas com o WLD e joga em C8
%     C8 = X;
%     save(['featuresWLDLBPC7/X_' num2str(k) '.mat'], 'C8'); %guarda a combina��o de features do fold atual em X_n
% end

%WLD
% for k=0:9
%     C8 = [];
%     load(['featuresWLDC7/X_' num2str(k)]); %retira o X do fold atual apenas com o WLD e joga em C8
%     C8 = X;
%     save(['featuresWLDLBPC7/X_' num2str(k) '.mat'], 'C8'); %guarda a combina��o de features do fold atual em X_n
% end

%LBP+HOG
for k=0:9
    C8 = [];
    load(['featuresLBPC7/X_' num2str(k)]); %retira o X do fold atual apenas com o WLD e joga em C8
                %normalizando:
                patterns = X;
                dim = size(patterns,1);

                %normalizando os dados:
                [MIN,I] = min(patterns,[],2); %pega o menor valor de todos dentro da base
                [MAX,I] = max(patterns,[],2); %pega o maior valor de todos dentro da base

                for n=1:dim
                    if (MAX(n)-MIN(n))==0
                        patterns(n,:)=0;
                    else
                        patterns(n,:) = (patterns(n,:)-MIN(n))/(MAX(n)-MIN(n));
                    end
                end
                X =
    C8 = [C8 X];
    load(['featuresHOGC7/X_' num2str(k)]); %retira o X do fold atual apenas com o WLD e joga em C8
    C8 = [C8 X];
    save(['featuresWLDLBPC7/X_' num2str(k) '.mat'], 'C8'); %guarda a combina��o de features do fold atual em X_n
end

% %WLD+HOG
% for k=0:9
%     C8 = [];
%     load(['featuresWLDC7/X_' num2str(k)]); %retira o X do fold atual apenas com o WLD e joga em C8
%     C8 = [C8 X];
%     load(['featuresHOGC7/X_' num2str(k)]); %retira o X do fold atual apenas com o WLD e joga em C8
%     C8 = [C8 (X*100)];
%     save(['featuresWLDLBPC7/X_' num2str(k) '.mat'], 'C8'); %guarda a combina��o de features do fold atual em X_n
% end


% % LBP e WLD
% for k=0:9
%     C8 = [];
%     load(['featuresWLDC7/X_' num2str(k)]); %retira o X do fold atual apenas com o WLD e joga em C8
%     C8 = [C8 X];
%     load(['featuresLBPC7/X_' num2str(k)]); %retira o X_LBP do fold atual e joga em C8
%     C8 = [C8 X];
%     save(['featuresWLDLBPC7/X_' num2str(k) '.mat'], 'C8'); %guarda a combina��o de features do fold atual em X_n
% end

% %WLD+LBP+HOG
% for k=0:9
%     C8 = [];
%     load(['featuresWLDC7/X_' num2str(k)]); %retira o X do fold atual apenas com o WLD e joga em C8
%     C8 = [C8 X];
%     load(['featuresLBPC7/X_' num2str(k)]); %retira o X do fold atual apenas com o WLD e joga em C8
%     C8 = [C8 X];
%     load(['featuresHOGC7/X_' num2str(k)]); %retira o X do fold atual apenas com o WLD e joga em C8
%     C8 = [C8 X];
%     save(['featuresWLDLBPC7/X_' num2str(k) '.mat'], 'C8'); %guarda a combina��o de features do fold atual em X_n
% end


